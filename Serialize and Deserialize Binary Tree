ðŸ‘‰PROBLEM STATEMENT:
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

ðŸ‘‰CODE:

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null)  return "";
        StringBuilder result= new StringBuilder();
        Queue<TreeNode> Q= new LinkedList<>();
        Q.add(root);
        while(!Q.isEmpty()){
            TreeNode node= Q.poll();
            if(node==null){
                result.append("n ");
                continue;
            }  

            result.append(node.val+ " ");
            Q.add(node.left);
            Q.add(node.right);
        }
        return result.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data=="")    return null;
        String[] values= data.split(" ");
        Queue<TreeNode> Q= new LinkedList<>();
        TreeNode root= new TreeNode(Integer.parseInt(values[0]));
        Q.add(root);
        for(int i=1; i<values.length; i++){
            TreeNode parent= Q.poll();
            if(!values[i].equals("n")){
                TreeNode left= new TreeNode(Integer.parseInt(values[i]));
                parent.left= left;
                Q.add(left);
            }
            if(!values[++i].equals("n")){
                TreeNode right= new TreeNode(Integer.parseInt(values[i]));
                parent.right= right;
                Q.add(right);
            }
        }
        return root;
    }
}
